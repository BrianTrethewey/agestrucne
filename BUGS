#List of known bugs

Fri Jul 29 DT 2016

B1.  Besides code to kill processes, also addressed by using pOpen instead of
	multiprocessing processes, which tended to hang when parent died.  Earlier note:
	addressed with revised process managment. Have added code to kill processes when
	the gui is killed, which at least should not leave haning processes.  However,
	the 9-sim hang may persist untill killed -- as noted, 2 of them were much more
	computationally intensive (CI) than the others, resulted  in one of the CI sims
	to hang.  I was able to recreate the problem on two computers (Linux) when I
	used the same 9 config files and started them in the same order.  On one
	comuter, closing the gui seems to have left the hanging process (running
	do_sim_replicate.py) running.  On the 2nd computer, closing the GUI killed all
	subprocesses still running sims. 

B2.  Fixed.Related to B1, clicking the "Cancel Simulatin" button during a long
simulation did not kill the process.  --testing shows fixed as of Fri Aug 12
DT 2016

Fri Aug 12 DT 2016

B3.  Improved by better control of pOpen process, though delays in termination
	persist. Cancelling an ne-estmation in the gui has seconds of delay before Ne2
	executable stops.  Then process dies with error in the multiprocessing mod --
	need a cleaner exit

B4. Fixed in pygenomics latest 20160825.  Windows -- pygenomics Controller.py
	uses a system command includeing "/dev/null", which directory windows lacks.  A
	patch using python's x-platform definition for null locations needs to be
	incorporated.

B5. Fixed 2016_08_15 -- mangled names in main menu.

B6.  Windows -- cancelling a simulation or ne-estimation process in the gui
	results in windows error, "WindowsError: [Error32] The process cannot access
	the file because it is being used by another process."  File locking conflict
	does not occur in Linux (Nor, I think, in OSX, but will need to test).

B7.  Loading a config file in the simulation interface -- cliking the select
	button then cancelling rarely results in an update that sets the config
	file to emtpy -- hard ro reproduce, as I'm not sure of the necessary conditions.

B8.  Rare but possible -- it's currently possible to load a genepop file that's been written as
	file but not yet filled iwth data, as the sim is not yet done -- but then
	running ne-estimator on the empty or parial genepop file.  However, since the
	genepop file is written to a tempname first (named using python uuid), this
	condition is only possible if an "os.move()" command is interrupted after ther
	user has chosen the (unlikely) temp name as input, or if  such that there's a
	final *genepop name but no data yet in the file.

B9.  Fixed.  Total characters in a genepop file go be used as input into the
	NeEstimator must not exceed 31 characters, else the auto-truncation that
	program performes on longer names, makes the output names unrecog.  to my
	algorithm.  For now I'm enforcing a much smaller basename for genepop file input
	(18chars), to make room for the rep/generation/subsampleparam fields I'm adding
	to intermediate NeEstimation files.  I don't yet have a fix, but I have coded
	warning dialogs when genepop files for input have names that exceed the limit.

Mon Aug 15 DT 2016

B10 Fixed 20160825 -- Windows -- seems to have resolve after revisions to
	pgdriveneestimator.py as of 2016_08_22 -- may have been change from
	multiprocessing.pool.map to map_async. 32-bit and 64-bit Win 7 (not in 64-bit
	win10) -- in GUI (therefore running using async python.multiprocessing pool),
	after invoking negui.py from powershell, then starting an ne-estimation:
	"WindowsError: [Error3] The system cannot find the path specified:
	'%SystemBoot%\\system32\\WindowsPowerShell\\v1.0]]\*.*'  Alternatively, when
	double-clicking on negui.py, an error message that traces back to
	pgdriveneestimator.py's def "execute_ne_for_each_sample", but ends in pool.py,
	line 567, "in get, raise, self._value, TypeError: object of type 'NoneType' has
	no len()"

B11 Fixed 2016_08_15, Windows success on win10 -- win10 and win7, when
	running the command line script pgdriveneestimator.py, either using "debug3" to
	run searially, or run async, terminates iwth trace back to writeGenePopFile in
	genepopfilemanager.py, line 360, def wirteGenePopFIle -- havaing been called
	from do_estimate() in pgdriveneestimator.py, line 459.  error: "IOError: [Errno
	2] No such file or directory: "  and then the files path, that begins has the
	form "_\\*filename
	-- looks like a bad path formation in the code.

Thu Aug 25 DT 2016 

B12 If any genepop file name has one or more comma
	in it, the Ne Estimation interface can't correctly parse the file name and will
	generate a file not found message.  B13 NeEstimator sometimes leaves *xTp*txt
	files after a run, and they should have a default save or delete.  B14 In
	NeEstimator interface -- need to revise the paramater/input files/output files
	check done before running.  The check for intermediate files will (redundantly
	complain about the output files existing (need a separate function to check for
	existing output files versus the intermediate files based on input genepop
	names.

Tue Aug 30 DT 2016

B13 simuPOP thrashes when lambda makes pop size shrink to too small
	before gens are done.  On OSX, have seen that cancelling the sim leaves the
	simuPOP python processes orphaned and still working.  tests on linux, invoking
	the same thrashing show that the processes are killed.  However, Not sure if the
	OSX problem was a special case that is repeatable on other platforms, since
	exact actions leading to the instance of orphaned working processes on the OSX problem 
	are not known.

Wed Aug 31 DT 2016

B14 If you run a simulation and set "replicates" to >1, then the *conf file that is produced
	by the run will have its "replicates" param set to 1 (since the
	replicates are run as single instances, reloading simupop for each replicate).
	Using the *conf file, then, to repeat the run with > 1 replicate, currently
	requires the user to reset the "repicates" param in the interface.

Tue Oct 25 DT 2016

B15 Fixed 20161031 (difficult to confirm complete fix, but many tests show no
	more persisiting tooltip windows).  In the ne estimation gui, tooltips do not
	disappear properly when mouse moves off.  This seems to happen to (soley?) in
	the combo boxes, when the keyboard is used to select from the dropdown list,
	while the mouse is over the control, so that the tooltip reappears when the
	keyboard selection is done, but the tooltip window then will not disappear as it
	should after mouse off.

B16 This symptom seems to have resolved with improved process handling when
	calling the Nb estimation driver: Have had inexplicable hangs in ne-estimation
	doing cohort sampling on a 20-pop genepop with N0 at  about 50.  Unable to
	consistently reproduce this bug, as identical interface inputs run to completion
	when attempting to reproduce the bug.

Sun Nov  6 ST 2016

B17 Fixed -- this bug was introduced recently, and fixed today.  Pre-validation
	of params in pgguineestimator.py misses exising  *_g_* NeEstimator
	intermediates, then runs and throws error when the pgdriver finds them exising.

Sun Nov 13 ST 2016

B18 Fixed -- Vertical scrolling in a tab does not re-engage after a new
	simulation or ne-estimation is created (in a new tab).

Sun Nov 20 ST 2016

B19 Windows 10 GUI (Windows 7 32-bit did not show this problem), some labels
	and buttons do not have enough width for the text. Also, in the Ne estimation
	GUI, the output file base name label runs under its corrsponding Entry box.

B20 Windows GUI, if the current focus is a combobox, the scroll wheel not only
	scrolls the whole interface (as desired), but also scrolls through and changes
	the combobox selection. 

2017_11_26

B21 Fixed 2017_02_15. User reports (email 01/26) that the plotting "stats out"
	file is being written to negui's current directory instead of the selected
	output directory.

2017_02_03

B22 Fixed 2017_02_21.  Windows only, user noted that when he loads over about
	200 genepop files into the Nb estimation interface, the list box showing the
	files stops updating.  This apparently caused by a limit on the number of
	characters Windows allows in a command. 

2017_02_21

B23 In WindowsFile locking prevents a temp file from being removed after it's created to
	solve B22 above.  This is also seen in the inability of the main
	nb-estimation-calling process to delete temporary files after an Nb estimation
	run is cancelled before completion,using the "Cancel Estimation" button.  This is
	probably the same problem in B6.
B24 Sluggishness in the interface when more than a few hundred genepop files
	are loaded.  The problem is not as bad inLinux, which only shows a slow
	response after pushing the "Run Estimation" button.  In Windows, however, the
	interface behavior is slow for all operations when many genepop files are
	loaded.

2017_02_21

b25 In the simulation interface, when the user changes (reduces) the number of repro cycles, then the "Nb and census adjustment" control, in in its initial value, will havce a max-cycle value invalid (i.e. > total repro cycles) and the sim will fail with an error message to console that notes the discprepancy

b26  In the simulation interface, while sim is in progress the list button controls for the "Nb and census adjustment" stay enabled.  They should be disabled.

2017_04_20

b27 Not a bug per-se but could be an unexpected behavior to users.  In Windows, execting negui.py from powershell, if the user scrolls (or otherwise manipulates the console prompt?) the execution is suspended, that is, the interface is still active and responsive, but the processes, such as the simulation procedure, hang until the user hits the enter key when the powershell windows is active.  THis web page I belive gives a solution, and suggests it is a peculiarity of powershell, and may not happen in the regular DOS command window: https://serverfault.com/questions/204150/sometimes-powershell-stops-sending-output-until-i-press-enter-why
Sun Mar 18 03:11:28 MDT 2018

2018_03_18

b28 When testing the regress and boxplot plotting interfaces -- hard crash with error, single line:
		Intel MKL FATAL ERROR: Cannot load mkl_intel_thread.dll.
	I Used this solution, from https://groups.google.com/a/continuum.io/forum/#!topic/anaconda/SnY1Uazkcew
		I had this problem too on windows 10, could not run anything using matplot in my Jupyter books.
		Solved it by renaming the mkl_*.dll files in \Windows\System32. I added .old to the filename.
		Looks like the mkl_* .dll files in Anaconda3\Library\bin are newer.
		Now my Jupyter books run fine.
	Note--I renamed 3 dll files, all starting with mkl_*.  Not sure what if any consequences my system will have down the line -- but seems possible now to crash some 32-bit program?
		

